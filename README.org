#+title: Git, GitHub and Reproducible Research
#+author: Alexander E. Zarebski

* Background material

This section provides some context for why you might care about git, GitHub and
reproducible research. This document only provides the absolute basics of these
topics but should get you started with them and help direct further learning.

** Disclaimer

These materials makes use of proprietary products and a simplified workflow in
order to emphasise the main concepts and to save on installation and
configuration time. Some references will be given at the end to direct you to
free and open source solutions and more sustainable workflows; the core ideas
are the same though.

** Version control (VC)

/Version control/ (VC) refers to systems which help to manage the writing and
maintenance of things such as software, documents, and websites. These systems
were developed to manage large software projects but are useful at many levels.
For example, VC can help you avoid the following situation: =my-analysis.R=,
=my-analysis-final.R=, =my-analysis-final-again.R=, and so on. Try coming back to
that 3 months later when a reviewer asks you to re-run something with a slight
modification!

*** Reproducible research and Open research

In addition to helping *you* with organising your files, a VC system and it's
associated tooling can also help the scientific community by helping to make
your research reproducible and open.

For your computational research to be considered /reproducible,/ it needs to be
described in such a way that others can replicate your results. For it to be
/open/, the materials (code, data and sufficient documentation) need to be
available for others. Simply dumping all of your code into something like GitHub
is not sufficient for your research to be considered reproducible.

** Git

Created in 2005 by Linus Torvalds to help with the development of the Linux
kernel, git has become a fundamental tool in software development. In the 2021
Stackoverflow Developer Survey over \(90\%\) of respondents used git; it is
nearly synonymous with version control. If you intend to collaborate in the
writing of substantial amounts of code, taking the time to learn how to use git
is a good idea.

Working through the practical example below will be much easier if we get
familiar with some of the git terminology first. Unless you are familiar with
git already, you should at least skim these before continuing.

*** Repository

A /repository/ is a directory containing your files and the history of all the
edits (see [[*Commit][commit]]) made to these files. You can have a repository that only
lives on your machine, but they are often shared on a platform such as GitHub.

*** Commit

An edit to a file that you have recorded as part of the history of edits is
called a /commit/. It is both a noun and a verb, you commit an edit and the
[[*Repository][repository]] contains all of your commits. This can be thought of as a stronger
version of saving a file. Each commit gets a unique identifier (called a /hash/).
Sometimes we use "commit" to refer to the state of all the code after an edit.

*** Clone

When you make a copy of a [[*Repository][repository]] you are /cloning/ that repository. The
resulting copy is referred to as a /clone/. Typically this will mean you have
downloaded a copy from a platform such as GitHub.

*** Pull

Suppose you [[*Clone][cloned]] a repository a while ago and you want to get a copy of all
the [[*Commit][commits]] that have been made to the original repository since then. To get
these commits you /pull/ them, which is a fancy way of saying updating your files.
This is sometimes referred to as /fetching/.

*** Push

If you have [[*Commit][commited]] some changes to your [[*Clone][clone]] of a [[*Repository][repository]] and want the
original repository to have these changes made, you /push/ these changes. This is
a fancy way of saying use your edits to update the original files.

*** Branch

A /branch/ is similar to a [[*Clone][clone]] in that it is a copy of a [[*Repository][repository]]. This
provides a more sophisticated way for people to work on their own version of
code, without messing up the main copy. This is not particularly important
unless you are collaborating with others on a project.

*** Merge

If someone has made some useful changes on their [[*Branch][branch]] the owner of the
repository may decide to include their commits in the main copy. This process of
including the changes on someone's branch is called /merging/ the changes.

*** Fork

When you make a copy of a repository that sits on your GitHub account. This is
similar to, but distinct from [[*Clone][cloning]] and making a [[*Branch][branch]].

** GitHub

*** What is GitHub?

GitHub, Inc. is a subsidairy of Microsoft. Their website provides freemium
hosting of git repositories. In addition to hosting the repositories, it offers
additional tools to assist with software development. We will make extensive use
of GitHub in this tutorial to avoid you needing to install anything on your
machine. If you are going to use git extensively, it would be wise to learn how
to do this from the command line or some other program.

*** Setting up a GitHub account

To register an account you will need an email address that can be used for
verification.

1. Visit [[https://github.com/]] and click *Sign Up*.
2. Fill in the forms to create an account.
3. Verify that account by entering the access code GitHub sends to the email
   address you registered with.
4. Verify that you can summon the *Command Palette* with =crtl k= for Windows and
   Linux and =command k= on a mac.
5. The appearance and accessibility settings can be reached by searching for
   them in the command palette.

** Zenodo

Zenodo is an open access archive operated by CERN which allows researchers to
archive research materials with a DOI which makes them easier to cite. This is a
more permanent form of storage than GitHub. It is easy to archive a particular
commit of a repository which is good practice if you want to refer to a
particular version of some code in a paper.

* TODO Worked example

Now that we have an understanding of version control and its associated tooling,
we can see an example of how this enables us to do more reproducible research.
Suppose that you wanted to include Figure [[fig:demo-result]] in a manuscript and
you wanted to ensure your analysis reproducible.

#+caption: The percentage of developers who use git has increased since 2015. Data from the Stackoverflow Developer Survey is shown as black points and a least squares regression is shown as a blue line, the trend is not significant at \(95\%\).
#+name: fig:demo-result
#+attr_org: :width 500px
#+attr_html: :width 400px
[[./git-usage.png]]

** Code and data

The data and the code that generated this figure are included below. The data is saved in a file =stackoverflow-git-data.csv=.

#+begin_src csv
year,percentage
2015,69.3
2017,69.2
2018,87.2
2020,82.8
2021,93.43
#+end_src

The code is saved in a file =make-plot.R=

#+begin_src R
  library(ggplot2)

  sods_data <- read.csv("stackoverflow-git-data.csv")

  g <- ggplot(
    data = sods_data,
    mapping = aes(x = year, y = percentage)) +
    geom_point() +
    geom_smooth(method = "lm") +
    geom_text(
      aes(x = 2020, y = 82.8, label = "only GitHub"),
      nudge_x = 0.2,
      nudge_y = -4) +
    labs(
      x = "Year",
      y = "Percentage who used git",
      title = "Git usage has increased",
      subtitle = "Data from Stackoverflow Developer Survey")

  ggsave(filename = "git-usage.png",
         plot = g,
         height = 7.4,
         width = 10.5,
         units = "cm")

  sink(file = "regression-summary.txt")
  summary(lm(percentage ~ year, data = sods_data))
  sink()
#+end_src

If we put these into a directory called =git-usage= we end up with the following

#+begin_example
git-usage
├── git-usage.png
├── make-plot.R
├── regression-summary.txt
└── stackoverflow-git-data.csv
#+end_example

Copy the code and data into a suitable place on your machine and run the R
script to ensure that it works. In this worked example we will go through
cleaning this up so it is easier for people (including ourselves) to make sense
of this.

** Organising the data and code

As a first step we will use directories to impose a bit of structure. Organising
our files in this way is useful as it makes it far easier for someone to
understand the purpose of each of the files. Follow the following steps to
organise your code more appropriately.

1. Make a directory called =src= and move =make-plot.R= there.
2. Make a directory called =data= and move =stackoverflow-git-data.csv= there.
3. Make a directory called =out= which we will write results to.
4. Fix the call to =read.csv= so it can find the CSV.
5. Fix the calls to =ggsave= and =sink= so it writes the output into =out=.

Once you have done this, the R script should look like the following.

#+begin_src R
  sods_data <- read.csv("data/stackoverflow-git-data.csv")

  ...

  ggsave(filename = "out/git-usage.png",
         plot = g,
         height = 7.4,
         width = 10.5,
         units = "cm")

  sink(file = "out/regression-summary.txt")
  summary(lm(percentage ~ year, data = sods_data))
  sink()
#+end_src

After you have run the code, the directory structure should look like the
following.

#+begin_example
git-usage
├── data
│   └── stackoverflow-git-data.csv
├── out
│   ├── git-usage.png
│   └── regression-summary.txt
└── src
    └── make-plot.R
#+end_example

** Uploading to GitHub

Now that our code is in a reasonable state, we can upload it to GitHub. If you
do not already have a GitHub account, please follow the instructions [[*Setting up a GitHub account][above]],
which describe how to make one. Once you have done this, follow the following
steps:

1. Visit [[https://github.com/]] and create a new repository by clicking *New*, you
   will need to pick a name for the repository (I called mine =git-usage=.) The
   default settings are fine. Click *Create repository*.
2. Click *creating a new file* to start the process of adding =src/make-plot.R=.
   1. Ensure the name of the file is =git-usage/src/make-plot.R=.
   2. Copy-and-paste the code in =make-plot.R= into the editor.
   3. Click *Commit new file*.
3. Repeat this process with =data/stackoverflow-git-data.csv= and the output files
   by clicking on *Add file* and selecting *Create new file*. Note that for
   =git-usage.png= you will need to use *Upload file* instead of *Create new file*.

** TODO Adding a license and a README

1. You get told you need to change something so you do that
   + You need to make a change and push that change
2. You might want to archive this on zenodo or something similar

** TODO Recording the session information

- You need to record the environment you used to carry out the computation in case someone wants to recreate it exactly

* TODO Next steps and alternative solutions

- You need to know where you can learn more about git
- You need to know what tools are used for what purposes
- You need to know how to navigate GitHub including the issue tracker and assess liveliness

* TODO Homework

** Question 1

- Explain (in 100--200 words) the purpose of git, GitHub, and zenodo and the
  relationship between these things.
- Find and report an alternative to each of these tools (50--150 words).

** Question 2

- Explain (in 100--200 words) the role of version control in reproducible
  research.
- Give an example (in 100--150 words) of a situation in which version control
  does not suffice to make a piece of work reproducible.

** Question 3

- Download the following script and data and organise this material in a
  repository in a suitable way.
- Give a brief overview of the decisions you made along the way (100--200
  words).

** TODO Question 4

- Fork the repository at *XXX* and merge the pull request. Note that this will
  require resolving conflicts in a sensible way.
- Give a brief overview of the decisions you made along the way (100--150
  words).

** Question 5

- Read the editorial [[https://doi.org/10.1371/journal.pcbi.1003285][Ten Simple Rules for Reproducible Computational Research]]
  and (in 200--300 words) give a brief explanation of how git and GitHub would
  or would not be relevant to each rule.